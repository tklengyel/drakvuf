name: ci
on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
permissions:
  actions: read
  contents: read
  security-events: write
jobs:
  init:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - 'ubuntu-20.04'
          - 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y build-essential autotools-dev autoconf-archive flex bison libjson-c-dev liblzo2-dev libglib2.0-dev libtool
      - name: Get submodule hashes version
        id: get-hash
        run: |
          echo XEN_HASH=$(git submodule | grep xen | awk '{ print $1 }') >> $GITHUB_OUTPUT
          echo LIBVMI_HASH=$(git submodule | grep libvmi | awk '{ print $1 }') >> $GITHUB_OUTPUT

      - name: Cache Xen debball
        id: cache-xen
        uses: actions/cache@v3
        with:
          path: xen/dist
          key: xen-${{ matrix.os }}-${{ steps.get-hash.outputs.XEN_HASH }}

      - name: Create Xen debball
        if: steps.cache-xen.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y wget git bcc bin86 gawk bridge-utils iproute2 libcurl4-openssl-dev bzip2 libpci-dev build-essential make gcc clang libc6-dev linux-libc-dev zlib1g-dev libncurses5-dev patch libvncserver-dev libssl-dev iasl libbz2-dev e2fslibs-dev git-core uuid-dev ocaml libx11-dev bison flex ocaml-findlib xz-utils gettext libyajl-dev libpixman-1-dev libaio-dev libfdt-dev cabextract libfuse-dev liblzma-dev kpartx python3-dev python3-pip golang libsystemd-dev ninja-build
          rm -rfv xen
          git submodule update --init xen
          cd xen
          ./configure --enable-githttp --disable-pvshim
          make -j2 debball
          cd ..

      - name: Install Xen debball
        run: |
          sudo apt-get install -f ./xen/dist/xen-*.deb

      - name: Cache Libvmi files
        id: cache-libvmi
        uses: actions/cache@v3
        with:
          path: libvmi/dist
          key: libvmi-${{ matrix.os }}-${{ steps.get-hash.outputs.LIBVMI_HASH }}

      - name: Build LibVMI
        if: steps.cache-libvmi.outputs.cache-hit != 'true'
        run: |
          rm -rfv libvmi
          sudo apt-get install -y build-essential autoconf-archive flex bison libjson-c-dev libxen-dev debhelper
          git submodule update --init libvmi
          cd libvmi
          sed -i 's/--disable-kvm/--disable-kvm --disable-file --disable-bareflank --disable-examples --disable-vmifs/g' debian/rules
          dpkg-buildpackage -B
          mkdir dist
          mv ../*.deb dist/

      - name: Install LibVMI
        run: |
          cd libvmi/dist
          sudo apt install -f ./*.deb
          sudo ldconfig
          cd ../..

    outputs:
      XEN_HASH: ${{ steps.get-hash.outputs.XEN_HASH }}
      LIBVMI_HASH: ${{ steps.get-hash.outputs.LIBVMI_HASH }}

  compile:
    runs-on: ${{ matrix.os }}
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - init
    strategy:
        matrix:
          os:
            - 'ubuntu-20.04'
            - 'ubuntu-latest'
          flags:
            - ''
            - '--enable-debug'
            - '--enable-debug --disable-plugin-syscalls'
            - '--enable-debug --enable-sanitize'
            - '--enable-debug --enable-repl'
            - '--enable-debug --enable-threadsafety'
    env:
      CC: clang
      CXX: clang++
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y clang build-essential autotools-dev autoconf-archive flex bison libjson-c-dev liblzo2-dev libglib2.0-dev libtool
          sudo pip3 install ctypesgen ipython

      - name: Cache Xen debball
        uses: actions/cache@v3
        with:
          path: xen/dist
          key: xen-${{ matrix.os }}-${{ needs.init.outputs.XEN_HASH }}

      - name: Cache Libvmi files
        uses: actions/cache@v3
        with:
          path: libvmi/dist
          key: libvmi-${{ matrix.os }}-${{ needs.init.outputs.LIBVMI_HASH }}

      - name: Install Xen debball
        run: |
          sudo apt-get install -f ./xen/dist/xen-*.deb

      - name: Install LibVMI
        run: |
          cd libvmi/dist
          sudo apt install -f ./*.deb
          sudo ldconfig
          cd ../..

      - name: autoreconf
        run: autoreconf -vif

      - name: Compile ${{ matrix.flags }}
        run: |
          ./configure ${{ matrix.flags }}
          make -j2

  tarbuild:
    runs-on: ${{ matrix.os }}
    needs:
      - init
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
        matrix:
          os:
            - 'ubuntu-20.04'
            - 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y clang build-essential autotools-dev autoconf-archive flex bison libjson-c-dev liblzo2-dev libglib2.0-dev libtool

      - name: Cache Xen debball
        uses: actions/cache@v3
        with:
          path: xen/dist
          key: xen-${{ matrix.os }}-${{ needs.init.outputs.XEN_HASH }}

      - name: Cache Libvmi files
        uses: actions/cache@v3
        with:
          path: libvmi/dist
          key: libvmi-${{ matrix.os }}-${{ needs.init.outputs.LIBVMI_HASH }}

      - name: Install Xen debball
        run: |
          sudo apt-get install -f ./xen/dist/xen-*.deb

      - name: Install LibVMI
        run: |
          cd libvmi/dist
          sudo apt install -f ./*.deb
          sudo ldconfig
          cd ../..

      - name: autoreconf
        run: autoreconf -vif

      - name: Compile from make dist tarball
        run: |
          ./configure
          make -j2 dist
          mkdir build && cd build
          tar xvf ../drakvuf-*.tar.gz
          cd *drakvuf*
          ./autogen.sh
          ./configure
          make -j2

  mesonbuild:
    runs-on: ${{ matrix.os }}
    needs:
      - init
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
        matrix:
          os:
            - 'ubuntu-20.04'
            - 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y clang build-essential libjson-c-dev liblzo2-dev libglib2.0-dev meson ninja-build

      - name: Cache Xen debball
        uses: actions/cache@v3
        with:
          path: xen/dist
          key: xen-${{ matrix.os }}-${{ needs.init.outputs.XEN_HASH }}

      - name: Cache Libvmi files
        uses: actions/cache@v3
        with:
          path: libvmi/dist
          key: libvmi-${{ matrix.os }}-${{ needs.init.outputs.LIBVMI_HASH }}

      - name: Install Xen debball
        run: |
          sudo apt-get install -f ./xen/dist/xen-*.deb

      - name: Install LibVMI
        run: |
          cd libvmi/dist
          sudo apt install -f ./*.deb
          sudo ldconfig
          cd ../..

      - name: Build with meson
        run: |
          export CC=clang
          export CXX=clang++

          meson build
          ninja -C build

  codeql-analyze:
    name: Code QL Analyze
    runs-on: ${{ matrix.os }}
    needs:
      - init
    strategy:
      fail-fast: false
      matrix:
        language: ['cpp']
        os:
          - 'ubuntu-20.04'
          - 'ubuntu-latest'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Install dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -y clang build-essential autotools-dev autoconf-archive flex bison libjson-c-dev liblzo2-dev libglib2.0-dev libtool

    - name: Cache Xen debball
      uses: actions/cache@v3
      with:
        path: xen/dist
        key: xen-${{ matrix.os }}-${{ needs.init.outputs.XEN_HASH }}

    - name: Cache Libvmi files
      uses: actions/cache@v3
      with:
        path: libvmi/dist
        key: libvmi-${{ matrix.os }}-${{ needs.init.outputs.LIBVMI_HASH }}

    - name: Install Xen debball
      run: |
        sudo apt-get install -f ./xen/dist/xen-*.deb

    - name: Install LibVMI
      run: |
        cd libvmi/dist
        sudo apt install -f ./*.deb
        sudo ldconfig
        cd ../..

    - name: Compile and install DRAKVUF
      run: |
        autoreconf -vif
        ./configure
        make -j2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  scan-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - 'ubuntu-latest'
    needs:
      - init
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          # Install packages
          sudo apt-get update -q
          sudo apt-get install -y clang clang-tools-13 autoconf-archive flex bison libjson-c-dev meson ninja-build

      - name: Cache Xen debball
        uses: actions/cache@v3
        with:
          path: xen/dist
          key: xen-${{ matrix.os }}-${{ needs.init.outputs.XEN_HASH }}

      - name: Cache Libvmi files
        uses: actions/cache@v3
        with:
          path: libvmi/dist
          key: libvmi-${{ matrix.os }}-${{ needs.init.outputs.LIBVMI_HASH }}

      - name: Install Xen debball
        run: |
          sudo apt-get install -f ./xen/dist/xen-*.deb

      - name: Install LibVMI
        run: |
          cd libvmi/dist
          sudo apt install -f ./*.deb
          sudo ldconfig
          cd ../..

      - name: Scan build
        run: |
          # Set Exports
          export CC=clang
          export CXX=clang++

          meson build

          # scan-build

          analyze-build-13 --cdb build/compile_commands.json \
            --status-bugs --analyze-headers \
            --disable-checker deadcode.DeadStores
