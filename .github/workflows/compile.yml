name: compile
on:
  pull_request:
    branches: [ master ]
jobs:
  compile:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - 'ubuntu-20.04'
    env:
      CC: clang
      CXX: clang++
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get remove -y clang
          sudo apt-get install -y clang-10 build-essential autotools-dev autoconf-archive flex bison libjson-c-dev liblzo2-dev libglib2.0-dev libtool
      - name: Get Xen version
        id: get-xen-hash
        run: |
          echo ::set-output name=XEN_HASH::$(git submodule | grep xen | awk '{ print $1 }')
      - name: Cache Xen debball
        id: cache-xen
        uses: actions/cache@v2
        with:
          path: xen/dist
          key: ${{ steps.get-xen-hash.outputs.XEN_HASH }}
      - name: Create Xen debball
        if: steps.cache-xen.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y wget git bcc bin86 gawk bridge-utils iproute2 libcurl4-openssl-dev bzip2 libpci-dev build-essential make gcc clang libc6-dev linux-libc-dev zlib1g-dev libncurses5-dev patch libvncserver-dev libssl-dev libsdl-dev iasl libbz2-dev e2fslibs-dev git-core uuid-dev ocaml libx11-dev bison flex ocaml-findlib xz-utils gettext libyajl-dev libpixman-1-dev libaio-dev libfdt-dev cabextract libfuse-dev liblzma-dev kpartx python3-dev python3-pip golang python-dev libsystemd-dev
          git submodule update --init xen
          cd xen
          ./configure --enable-githttp --disable-pvshim
          make -j4 debball
          cd ..
      - name: Install Xen debball
        run: |
          sudo dpkg -i xen/dist/xen-*.deb
      - name: Install LibVMI
        run: |
          git submodule update --init libvmi
          cd libvmi
          autoreconf -vif
          ./configure --disable-kvm --disable-file --disable-bareflank --disable-examples --disable-vmifs
          make -j2
          sudo make install
          sudo ldconfig
          cd ..
      - name: autoreconf
        run: autoreconf -vif
      - name: Compile
        run: |
          ./configure
          make -j2
          make -j2 clean
      - name: Compile debug
        run: |
          ./configure --enable-debug
          make -j2
          make -j2 clean
      - name: Compile with plugin disabled
        run: |
          ./configure --enable-debug --disable-plugin-syscalls
          make -j2
          make -j2 clean
      - name: Compile with sanitizer enabled
        run: |
          ./configure --enable-debug --enable-sanitize
          make -j2
          make -j2 clean
      - name: Compile with REPL
        run: |
          sudo pip3 install ctypesgen ipython
          ./configure --enable-debug --enable-repl
          make -j2
          make -j2 clean
      - name: Compile from make dist tarball
        run: |
          ./configure
          make -j2 dist
          mkdir build && cd build
          tar xvf ../drakvuf-*.tar.gz
          cd *drakvuf*
          ./autogen.sh
          ./configure
          make -j2
