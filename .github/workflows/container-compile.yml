name: container-compile
on:
  pull_request:
    branches: [ master ]
permissions:
  contents: read
jobs:
  compile:
    strategy:
      matrix:
        container:
          - 'debian:buster-slim'
          - 'debian:bullseye-slim'
          - 'ubuntu:focal'
          - 'ubuntu:jammy'

    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.container }}

    steps:
    - name: Install dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        apt-get update -q
        apt-get install -y autoconf-archive flex bison libjson-c-dev clang build-essential git libtool autotools-dev libglib2.0-dev libyajl-dev liblzo2-dev
        apt-get clean

    - name: Configure safe dirs
      run: git config --global --add safe.directory $PWD

    - uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Get Xen version
      id: get-xen-hash
      run: |
        echo XEN_HASH=${{ matrix.container }}_$(git submodule | grep xen | awk '{ print $1 }') >> $GITHUB_OUTPUT

    - name: Cache Xen debball
      id: cache-xen
      uses: actions/cache@v3
      with:
        path: xen/dist
        key: ${{ steps.get-xen-hash.outputs.XEN_HASH }}

    - name: Create Xen debball
      if: steps.cache-xen.outputs.cache-hit != 'true'
      run: |
        apt-get install -y wget git bcc bin86 gawk bridge-utils iproute2 libcurl4-openssl-dev bzip2 libpci-dev build-essential make gcc clang libc6-dev linux-libc-dev zlib1g-dev libncurses5-dev patch libvncserver-dev libssl-dev iasl libbz2-dev e2fslibs-dev git-core uuid-dev ocaml libx11-dev bison flex ocaml-findlib xz-utils gettext libpixman-1-dev libaio-dev libfdt-dev cabextract libfuse-dev liblzma-dev autoconf-archive kpartx python3-dev python3-pip golang libsystemd-dev ninja-build
        git submodule update --init xen
        cd xen
        ./configure --enable-githttp --disable-pvshim
        make -j4 debball
        cd ..

    - name: Install Xen debball
      run: |
        dpkg -i xen/dist/xen-*.deb

    - name: Install LibVMI
      run: |
        git submodule update --init libvmi
        cd libvmi
        autoreconf -vif
        ./configure --disable-kvm --disable-bareflank --disable-file --disable-examples
        make
        make install
        cd ..

    - name: Compile
      env:
        CC: clang
        CXX: clang++
      run: |
        autoreconf -vif
        ./configure --enable-debug
        make
