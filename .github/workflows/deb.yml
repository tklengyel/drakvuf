name: Build package
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
permissions:
  contents: read
concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Generate variables
      id: gen_vars
      run: |
        echo short_sha=$(echo ${GITHUB_SHA} | cut -c1-8) >> $GITHUB_OUTPUT
        echo cur_datetime=$(date '+%Y-%m-%d %H:%M:%S') >> $GITHUB_OUTPUT
    - name: Delete old release
      uses: dev-drprasad/delete-older-releases@e3510b26d17114d63269aa02d3ebb592936d0981 # pin 0.2.0
      if: github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        repo: tklengyel/drakvuf-builds
        keep_latest: 0
        delete_tags: true
    - name: Create a Release
      if: github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
        release_tag="build-${{ github.sha }}"
        title="DRAKVUF ${{ steps.gen_vars.outputs.cur_datetime }} ${{ steps.gen_vars.outputs.short_sha }}"
        gh release create $release_tag --notes "Automated build" -R tklengyel/drakvuf-builds -t "$title"
        echo $release_tag > release-tag.txt
    - name: Upload release tag artifact
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v3
      with:
        name: release-tag
        path: release-tag.txt
  deb:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container:
          - "debian:10-slim"
          - "debian:11-slim"
          - "ubuntu:focal"
          - "ubuntu:jammy"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Fetch release tag
        if: github.event_name == 'push'
        uses: actions/download-artifact@v3
        with:
          name: release-tag
      - name: Generate variables
        id: gen_vars
        run: |
          SYSTEM_ID=$(echo ${{ matrix.container }} | cut -f1 '-d:')
          DISTRIBUTION=$(echo ${{ matrix.container }} | cut -f2 '-d:')
          ARTIFACT_PREFIX="${SYSTEM_ID}_${DISTRIBUTION}"
          echo "Artifact prefix: $ARTIFACT_PREFIX"
          echo artifact_prefix=${ARTIFACT_PREFIX} >> $GITHUB_OUTPUT
          XEN_COMMIT=$(git ls-tree HEAD xen | cut -f3 '-d ' | cut -f1 -d$'\t')
          echo "Xen commit: $XEN_COMMIT"
          echo xen_commit=${XEN_COMMIT} >> $GITHUB_OUTPUT
          if [ -f release-tag.txt ]; then
            RELEASE_TAG=$(cat release-tag.txt)
            echo "Release tag: $RELEASE_TAG"
            echo release_tag=${RELEASE_TAG} >> $GITHUB_OUTPUT
          fi
      - name: Cache Xen intermediate
        uses: actions/cache@v3
        with:
          path: |
            package/cache
          key: xen-${{ matrix.container }}-${{ steps.gen_vars.outputs.xen_commit }}-v2
      - name: Build package
        id: build_drakvuf_deb
        run: |
          sh package/build.sh ${{ matrix.container }}
          DRAKVUF_DEB_PATH=$(find package/out/drakvuf*.deb | head -n1)
          DRAKVUF_DEB_NAME=$(basename "$DRAKVUF_DEB_PATH")
          XEN_DEB_PATH=$(find package/out/xen*.deb | head -n1)
          XEN_DEB_NAME=$(basename "$XEN_DEB_PATH")
          if [ ! -z $DRAKVUF_DEB_PATH ]; then
            echo drakvuf_deb_path=${DRAKVUF_DEB_PATH} >> $GITHUB_OUTPUT
            echo drakvuf_deb_name=${{ steps.gen_vars.outputs.artifact_prefix }}_${DRAKVUF_DEB_NAME} >> $GITHUB_OUTPUT
          fi
          if [ ! -z $XEN_DEB_PATH ]; then
            echo xen_deb_path=${XEN_DEB_PATH} >> $GITHUB_OUTPUT
            echo xen_deb_name=${{ steps.gen_vars.outputs.artifact_prefix }}_${XEN_DEB_NAME} >> $GITHUB_OUTPUT
          fi
      - name: Upload DRAKVUF asset
        if: github.event_name == 'push' && steps.build_drakvuf_deb.outputs.drakvuf_deb_path != ''
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          cp ${{ steps.build_drakvuf_deb.outputs.drakvuf_deb_path }} ${{ steps.build_drakvuf_deb.outputs.drakvuf_deb_name }}
          gh release upload ${{ steps.gen_vars.outputs.release_tag }} ${{ steps.build_drakvuf_deb.outputs.drakvuf_deb_name }} -R tklengyel/drakvuf-builds
      - name: Upload Xen asset
        if: github.event_name == 'push' && steps.build_drakvuf_deb.outputs.xen_deb_path != ''
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          cp ${{ steps.build_drakvuf_deb.outputs.xen_deb_path }} ${{ steps.build_drakvuf_deb.outputs.xen_deb_name }}
          gh release upload ${{ steps.gen_vars.outputs.release_tag }} ${{ steps.build_drakvuf_deb.outputs.xen_deb_name }} -R tklengyel/drakvuf-builds
