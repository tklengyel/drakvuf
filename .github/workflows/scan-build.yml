name: scan-build
on:
  pull_request:
    branches: [ master ]
jobs:
  scan-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - 'ubuntu-20.04'
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          # Install packages
          sudo apt-get update -q
          sudo apt-get install -y clang-10 clang-tools-10 autoconf-archive flex bison libjson-c-dev
      - name: Get Xen version
        id: get-xen-hash
        run: |
          echo ::set-output name=XEN_HASH::$(git submodule | grep xen | awk '{ print $1 }')
      - name: Cache Xen debball
        id: cache-xen
        uses: actions/cache@v2
        with:
          path: xen/dist
          key: ${{ steps.get-xen-hash.outputs.XEN_HASH }}
      - name: Create Xen debball
        if: steps.cache-xen.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y wget git bcc bin86 gawk bridge-utils iproute2 libcurl4-openssl-dev bzip2 libpci-dev build-essential make gcc clang libc6-dev libc6-dev-i386 linux-libc-dev zlib1g-dev libncurses5-dev patch libvncserver-dev libssl-dev libsdl-dev iasl libbz2-dev e2fslibs-dev git-core uuid-dev ocaml libx11-dev bison flex ocaml-findlib xz-utils gettext libyajl-dev libpixman-1-dev libaio-dev libfdt-dev cabextract libglib2.0-dev autoconf automake libtool libjson-c-dev libfuse-dev liblzma-dev autoconf-archive kpartx python3-dev python3-pip golang python-dev libsystemd-dev
          git submodule update --init xen
          cd xen
          ./configure --enable-githttp --disable-pvshim
          make -j4 debball
          cd ..
      - name: Install Xen debball
        run: |
          sudo dpkg -i xen/dist/xen-*.deb
      - name: Scan build
        run: |
          # Set Exports
          export PATH=/usr/lib/llvm-10/bin:$PATH
          export CC=clang-10
          export CXX=clang++-10
          # Compile & install LibVMI
          git submodule update --init libvmi
          cd libvmi
          autoreconf -vif
          ./configure --disable-kvm --disable-file --disable-bareflank --disable-examples --disable-vmifs
          make -j2
          sudo make install
          sudo ldconfig
          cd ..
          # scan-build
          autoreconf -vif
          scan-build --status-bugs --use-cc=clang-10 --use-c++=clang++-10 -analyze-headers -disable-checker deadcode.DeadStores ./configure --enable-debug
          scan-build --status-bugs --use-cc=clang-10 --use-c++=clang++-10 -analyze-headers -disable-checker deadcode.DeadStores make -j2
