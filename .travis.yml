os: linux
dist: focal
language: c
compiler: clang
services:
    - docker
git:
    submodules: false
addons:
  apt:
    update: true
    packages:
    - clang-10
    - clang-tools-10
    - bison
    - flex
    - libjson-c-dev
    - autoconf-archive
    - libxen-dev
env:
  global:
    - PATH=/usr/lib/llvm-10/bin:$PATH
    - INSTALLDIR=$PWD/usr/local/
    - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/usr/local/lib
    - C_INCLUDE_PATH=$PWD/usr/local/include
    - CPLUS_INCLUDE_PATH=$PWD/usr/local/include
    - PKG_CONFIG_PATH="$PWD/usr/local/lib/pkgconfig/"
    - LDFLAGS="-L$PWD/usr/local/lib"
    - CFLAGS="-I$PWD/usr/local/include"
cache:
  ccache: true
  directories:
    - $INSTALLDIR
before_install:
    - |
      export CC="ccache clang"
      export CXX="ccache clang++"
      export CPP="ccache clang-cpp"
      if [[ -z $SKIP_LIBVMI ]]; then
         git submodule update --init libvmi
         LIBVMI_HASH=$(git ls-files -s libvmi | cut -f2 '-d ')
         CACHED_HASH=$(cat $INSTALLDIR/libvmi_hash || echo -n "")
         if [[ "$LIBVMI_HASH" != "$CACHED_HASH" ]]; then
             cd libvmi
             autoreconf -vif
             ./configure --prefix=${INSTALLDIR} --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
             make
             rm -rf $INSTALLDIR
             make install
             echo $LIBVMI_HASH > $INSTALLDIR/libvmi_hash
             cd ..
         fi
      fi

jobs:
    include:

#
# Whitespace check
#
    - env:
        - TEST="whitespace"
        - SKIP_LIBVMI=1
      script:
        - git remote add upstream https://github.com/$TRAVIS_REPO_SLUG.git
        - git fetch upstream
        - git diff --check upstream/master

#
# Astyle check
#
    - env:
        - TEST="astyle"
        - ARTISTIC_STYLE_OPTIONS=".astylerc"
        - SKIP_LIBVMI=1
      install:
        - sudo apt-get -q -y install astyle
      script:
        - astyle -Q `find . -name "*.c" -o -name ".h" -o -name ".cpp" -name ".hpp"` > astyle.out
        - TEST=$(cat astyle.out | wc -l)
        - |
          if [[ $TEST -ne 0 ]]; then
            cat astyle.out
            git --no-pager diff
            echo "Please fix style issues as shown above"
            exit 1
          fi

#
# cppcheck
#
    - env:
        - TEST="cppcheck"
        - SKIP_LIBVMI=1
      addons:
        snaps:
          - cppcheck
      script:
        - cppcheck --error-exitcode=1 --force ./src

#
# compile tests
#
    - env:
        - TEST="compile"
      install:
        - ./autogen.sh
      script:
        - ./configure --prefix=${INSTALLDIR} || cat config.log
        - make

    - env:
        - TEST="compile with plugin disabled"
      install:
        - ./autogen.sh
      script:
        - ./configure --prefix=${INSTALLDIR} --disable-plugin-syscalls || cat config.log
        - make

    - env:
        - TEST="compile debug"
      install:
        - ./autogen.sh
      script:
        - ./configure --prefix=${INSTALLDIR} --enable-debug --enable-sanitize || cat config.log
        - make

    - env:
        - TEST="compile debug with plugin disabled"
      install:
        - ./autogen.sh
      script:
        - ./configure --prefix=${INSTALLDIR} --enable-debug --disable-plugin-syscalls || cat config.log
        - make

    - env:
        - TEST="compile from make dist tarball"
      install:
        - ./autogen.sh
      script:
        - ./configure --prefix=${INSTALLDIR} || cat config.log
        - make dist
        - mkdir build && cd build
        - tar xvf ../drakvuf-*.tar.gz
        - cd *drakvuf*
        - ./autogen.sh
        - ./configure --prefix=${INSTALLDIR} || cat config.log
        - make

    - env:
        - TEST="compile debug with REPL enabled"
      install:
        - sudo pip3 install ctypesgen ipython
        - ./autogen.sh
      script:
        - ./configure --enable-debug --enable-sanitize --enable-repl || cat config.log
        - make

#
# clang scan-build
#
    - env:
        - TEST="scan-build"
      install:
        - ./autogen.sh
      script:
        - scan-build-10 --status-bugs --use-cc=clang-10 --use-c++=clang++-10 -analyze-headers -disable-checker deadcode.DeadStores ./configure --enable-debug
        - scan-build-10 --status-bugs --use-cc=clang-10 --use-c++=clang++-10 -analyze-headers -disable-checker deadcode.DeadStores make

#
# Build binary packages and push them as releases on drakvuf-builds
#
    - stage: package
      if: branch = master
      env:
        - TEST="package build"
      script:
        - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then exit 0; fi'
        - git submodule update --init libvmi xen
        - travis_wait 60 sh package/build.sh;
      cache:
        directories:
          - package/cache
      before_deploy:
        - git config --local user.name "drakvuf-builds"
        - git config --local user.email "drakvuf-builds@tklsoftware.com"
        - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)}
        - git tag $TRAVIS_TAG
      deploy:
        provider: releases
        edge: true
        repo: tklengyel/drakvuf-builds
        file:
          - package/out/**/*

#
# Coverity
#
    - stage: cloudscan
      if: branch = master
      env:
        - TEST="Coverity"
      dist: bionic
      addons:
        apt:
          update: true
          packages:
            - clang-10
            - clang-tools-10
            - bison
            - flex
            - libjson-c-dev
            - autoconf-archive
            - curl
        coverity_scan:
            project:
                name: "$COVERITY_PROJECT_NAME"
                description: "Build submitted via Travis CI"
            notification_email: $COVERITY_NOTIFICATION_EMAIL
            build_command_prepend: "./autogen.sh; ./configure --enable-debug"
            build_command:   "make"
            branch_pattern: $COVERITY_BRANCH_PATTERN
      install:
        - curl -s https://api.github.com/repos/tklengyel/drakvuf-builds/releases/latest | grep deb | grep browser_download_url | awk '{ print $2 }' | xargs wget
        - sudo dpkg -i drakvuf-bundle-* || sudo apt-get -f install
      script:
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

#
# SonarCloud
#
    - if: branch = master
      env:
        - TEST="SonarCloud"
      addons:
        sonarcloud:
            organization: "drakvuf"
            token: "$SONAR_TOKEN"
        apt:
            update: true
            packages:
              - clang-10
              - clang-tools-10
              - bison
              - flex
              - libjson-c-dev
              - autoconf-archive
              - libxen-dev
      script:
        - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then exit 0; fi'
        - ./autogen.sh
        - ./configure --enable-debug
        - build-wrapper-linux-x86-64 --out-dir bw-output make -j2
        - sonar-scanner
